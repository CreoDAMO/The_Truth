Incomplete multi-character sanitization
 Open in main 1 minute ago
The previous fix suggestion was discarded because new code was pushed affecting this alert's location.
Request a new fix to remediate this alert with the help of Copilot Autofix for CodeQL

Code snippet
web/index.html:72 
                    // Basic tag filtering (simplified for fallback)
                    if (options.SAFE_FOR_JQUERY || sanitized.includes('<')) {
                        // Strip all tags except allowed ones as a safety measure
                        sanitized = sanitized.replace(/<(?!\/?(?:div|span|p|h[1-6]|strong|em|br|ul|ol|li|a)\b)[^>]*>/gi, '');
This string may still contain 
, which may cause an HTML element injection vulnerability.
CodeQL
                    }

                    return sanitized;
Rule
Tool
CodeQL
Rule ID
js/incomplete-multi-character-sanitization
Query
View source
Description
Sanitizing untrusted input is a common technique for preventing injection attacks and other security vulnerabilities. Regular expressions are often used to perform this sanitization. However, when the regular expression matches multiple consecutive characters, replacing it just once can result in the unsafe text reappearing in the sanitized input.

---

Incomplete multi-character sanitization
 Open in main 3 minutes ago
Speed up the remediation of this alert with Copilot Autofix for CodeQL

Code snippet
web/index.html:59 
                    console.warn('Using enhanced security fallback for HTML sanitization');

                    // Remove all script tags and event handlers
                    let sanitized = html
                        .replace(/<script\b[^<]*(?:(?!<\/script\s*[^>]*>)[^<]*)*<\/script\s*[^>]*>/gi, '')
                        .replace(/javascript:|data:|vbscript:/gi, '')
                        .replace(/on\w+\s*=\s*["'][^"']*["']/gi, '')
                        .replace(/on\w+\s*=\s*[^>\s]+/gi, '');
This string may still contain 
, which may cause an HTML attribute injection vulnerability.
CodeQL

                    // Allow only safe HTML elements and attributes
                    const allowedTags = ['div', 'span', 'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'strong', 'em', 'br', 'ul', 'ol', 'li', 'a'];
Rule
Tool
CodeQL
Rule ID
js/incomplete-multi-character-sanitization
Query
View source
Description
Sanitizing untrusted input is a common technique for preventing injection attacks and other security vulnerabilities. Regular expressions are often used to perform this sanitization. However, when the regular expression matches multiple consecutive characters, replacing it just once can result in the unsafe text reappearing in the sanitized input.

---

Incomplete multi-character sanitization
 Open in main 3 minutes ago
Speed up the remediation of this alert with Copilot Autofix for CodeQL

Code snippet
web/index.html:59 
                    console.warn('Using enhanced security fallback for HTML sanitization');

                    // Remove all script tags and event handlers
                    let sanitized = html
                        .replace(/<script\b[^<]*(?:(?!<\/script\s*[^>]*>)[^<]*)*<\/script\s*[^>]*>/gi, '')
                        .replace(/javascript:|data:|vbscript:/gi, '')
                        .replace(/on\w+\s*=\s*["'][^"']*["']/gi, '')
This string may still contain 
, which may cause an HTML attribute injection vulnerability.
CodeQL
                        .replace(/on\w+\s*=\s*[^>\s]+/gi, '');

                    // Allow only safe HTML elements and attributes
Rule
Tool
CodeQL
Rule ID
js/incomplete-multi-character-sanitization
Query
View source
Description
Sanitizing untrusted input is a common technique for preventing injection attacks and other security vulnerabilities. Regular expressions are often used to perform this sanitization. However, when the regular expression matches multiple consecutive characters, replacing it just once can result in the unsafe text reappearing in the sanitized input.

---

Incomplete multi-character sanitization
 Open in main 4 minutes ago
Speed up the remediation of this alert with Copilot Autofix for CodeQL

Code snippet
web/index.html:59 
                    console.warn('Using enhanced security fallback for HTML sanitization');

                    // Remove all script tags and event handlers
                    let sanitized = html
                        .replace(/<script\b[^<]*(?:(?!<\/script\s*[^>]*>)[^<]*)*<\/script\s*[^>]*>/gi, '')
This string may still contain 
, which may cause an HTML element injection vulnerability.
CodeQL
                        .replace(/javascript:|data:|vbscript:/gi, '')
                        .replace(/on\w+\s*=\s*["'][^"']*["']/gi, '')
                        .replace(/on\w+\s*=\s*[^>\s]+/gi, '');
Rule
Tool
CodeQL
Rule ID
js/incomplete-multi-character-sanitization
Query
View source
Description
Sanitizing untrusted input is a common technique for preventing injection attacks and other security vulnerabilities. Regular expressions are often used to perform this sanitization. However, when the regular expression matches multiple consecutive characters, replacing it just once can result in the unsafe text reappearing in the sanitized input.